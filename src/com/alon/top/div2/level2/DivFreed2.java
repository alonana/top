package com.alon.top.div2.level2;

public class DivFreed2 {

    public static void main(String[] args) throws Exception {
        check(3, 3, 15);
        check(2, 2, 3);
        check(9, 1, 1);
        check(1, 107, 107);
        check(2, 10, 83);
        check(2, 1234, 1515011);
        check(3, 8, 326);
        check(10, 100000, 526882214);
        check(6, 76199, 584614085);
        check(7, 81405, 859326613);
        check(6, 99409, 860597418);
        check(6, 90238, 719200441);
        check(8, 6872, 963251199);
        check(8, 13068, 478149370);
        check(3, 99053, 56293801);
        check(5, 80739, 177519785);
        check(7, 55556, 174774945);
        check(4, 99120, 956042192);
        check(7, 94152, 516516776);
        check(6, 81611, 347800351);
        check(5, 54058, 621001623);
        check(9, 88126, 594303006);
        check(8, 48067, 508654564);
        check(10, 91454, 590231788);
        check(1, 1917, 1917);
        check(8, 40215, 304819617);
        check(10, 24847, 757615869);
        check(4, 4221, 792100828);
        check(9, 19389, 422975655);
        check(6, 23959, 412082218);
        check(10, 62418, 560469948);
        check(10, 19249, 665832051);
        check(7, 14909, 946687333);
        check(10, 73275, 380673450);
        check(3, 7325, 163433547);
        check(4, 27250, 19583528);
        check(1, 92650, 92650);
        check(3, 16267, 813344752);
        check(5, 30401, 603311649);
        check(10, 50840, 405729275);
        check(6, 71311, 158423781);
        check(8, 65956, 164283021);
        check(4, 20129, 86395929);
        check(6, 34951, 512466752);
        check(4, 84580, 785890035);
        check(4, 18460, 867620185);
        check(7, 90900, 193664213);
        check(8, 25782, 220023699);
        check(6, 100000, 512016075);
        check(3, 15455, 332299863);
        check(5, 78205, 391488);
        check(3, 71114, 347494848);
        check(4, 90365, 678538167);
        check(6, 18262, 673246457);
        check(1, 71156, 71156);
        check(8, 84798, 999753640);
        check(4, 73269, 179601885);
        check(1, 14143, 14143);
        check(2, 69739, 862809306);
        check(10, 4822, 285140732);
        check(3, 21968, 770725893);
        check(1, 30392, 30392);
        check(5, 73647, 818310022);
        check(9, 8043, 528848531);
        check(1, 80747, 80747);
        check(7, 24094, 874732270);
        check(3, 86739, 854310152);
        check(9, 24615, 530475099);
        check(8, 46850, 118808788);
        check(1, 84210, 84210);
        check(2, 3390, 11467404);
        check(5, 79831, 58035587);
        check(4, 32133, 14507260);
        check(5, 51649, 63156236);
        check(2, 95008, 25511365);
        check(4, 62378, 588400151);
        check(6, 67850, 293885570);
        check(10, 33547, 720169526);
        check(3, 57864, 933932686);
        check(8, 96694, 390848092);
        check(9, 35256, 419527445);
        check(9, 69285, 32675648);
        check(6, 96637, 554892402);
        check(5, 83471, 799033198);
        check(2, 29310, 858799397);
        check(7, 85721, 808458954);
        check(10, 32695, 455526197);
        check(3, 50680, 369554729);
        check(5, 4548, 389819697);
        check(6, 80213, 558206961);
        check(3, 90895, 807116657);
        check(2, 18498, 342009884);
        check(2, 4783, 22840619);
        check(3, 49987, 679936569);
        check(4, 31457, 246824467);
        check(10, 12823, 852513267);
        check(1, 70265, 70265);
        check(2, 54011, 916645214);
        check(10, 37395, 130943290);
        check(6, 29049, 350465115);
        check(3, 11479, 318076859);
        check(3, 54588, 74215924);
        check(3, 42364, 824116816);
        check(1, 66114, 66114);
        check(3, 82202, 276289080);
        check(3, 72336, 647608474);
        check(6, 78792, 332232727);
        check(5, 8470, 635337435);
        check(5, 100000, 546009734);
        check(8, 64576, 215917160);
        check(4, 47641, 425912490);
        check(2, 41915, 756456533);
        check(10, 19420, 954313690);
        check(2, 96690, 347927861);
        check(5, 34034, 376962211);
        check(10, 96872, 143356384);
        check(6, 11217, 940451836);
        check(1, 60745, 60745);
        check(6, 28893, 176571474);
        check(2, 58664, 440870353);
        check(4, 100000, 233454866);
        check(4, 56838, 162169410);
        check(8, 6319, 253844403);
        check(1, 20094, 20094);
        check(4, 25094, 96729);
        check(1, 59056, 59056);
        check(2, 47181, 225578891);
        check(7, 46890, 661853193);
        check(9, 99999, 534287004);
        check(10, 97220, 999707305);
        check(10, 98989, 116690329);
        check(8, 50000, 277491415);
        check(9, 99199, 794476284);
    }

    static private void check(int n, int k, int expected) throws Exception {
        System.out.println("checking n=" + n + " k=" + k);
        int actual = new DivFreed2().count(n, k);
        if (actual != expected) {
            throw new Exception("expected " + expected + " actual " + actual);
        }
    }

    private int p;

    public int count(int n, int k) {
        long dp[][] = new long[n][k+3];
        for (int i=1; i<=k; i++){
            dp[n-1][i]=1;
        }
        for (int pos=n-2; pos>=0; pos--){
            for (int a=1;a<=k;a++){
                for (int b=1; b<=k; b++){
                    if (a%b!=0 || a<=b){
                        dp[pos][a]+= dp[pos+1][b];
                    }


                    p++;
                    if (p>10000000){
                        p=0;
                        System.out.println(pos + " " +a + " " +b);
                    }
                }
            }
        }

//        for (int i =0 ; i<n; i++){
//            System.out.println(Arrays.toString(dp[i]));
//        }
        long total = 0;
        for (int i=0; i<=k+1; i++){
            total+=dp[0][i];
        }
        int mody = (int) 1e9+7;
        return (int) (total%mody);
    }
}